<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OverlayManagementClient</name>
    </assembly>
    <members>
        <member name="T:OverlayManagementClient.Controllers.NetworkController">
            <summary>
            This Controller provides endpoints for admins to manage Networks.
            </summary>
        </member>
        <member name="M:OverlayManagementClient.Controllers.NetworkController.Index">
            <summary>
            Endpoing to access homepage(List of networks).
            </summary>
        </member>
        <member name="M:OverlayManagementClient.Controllers.NetworkController.Create">
            <summary>
            Endpoint that for getting the form for deployment of network.
            </summary>
        </member>
        <member name="M:OverlayManagementClient.Controllers.NetworkController.Create(OverlayManagementClient.Models.OVSConnection)">
            <summary>
            Endpoint to submit form data for network deployment
            </summary>
            <param name="oVSConnection">OVSConnection DTO containing all information for network deployment</param>
        </member>
        <member name="M:OverlayManagementClient.Controllers.NetworkController.NetworkDetails(System.String)">
            <summary>
            Endpoint for getting the Network details window.
            </summary>
            <param name="vni">VNI of the network for which details window should be returned</param>
        </member>
        <member name="M:OverlayManagementClient.Controllers.NetworkController.Edit(OverlayManagementClient.Models.OverlayNetwork)">
            <summary>
            !!!TODO not implemented on frontend and not tested!!!
            Endpoint to edit the existing network.
            </summary>
            <param name="overlayNetwork">updated OverlayNetwork object</param>
        </member>
        <member name="M:OverlayManagementClient.Controllers.NetworkController.Delete(System.String)">
            <summary>
            Endpoint to remove the existing network.
            </summary>
            <param name="groupId">Group id to witch network is assigned</param>
        </member>
        <member name="M:OverlayManagementClient.Controllers.NetworkController.CreateTargetDevice">
            <summary>
            Endpoint that for getting the form for deployment of taregt device.
            </summary>
        </member>
        <member name="M:OverlayManagementClient.Controllers.NetworkController.CreateTargetDevice(OverlayManagementClient.Models.VmConnection)">
            <summary>
            Endpoint to submit form data for target device deployment
            </summary>
            <param name="vmConnection">VmConnection DTO containing all information for device deployment</param>
        </member>
        <member name="M:OverlayManagementClient.Controllers.NetworkController.DeleteTargetDevice(System.Guid,System.String)">
            <summary>
            Endpoint to remove target device from the network.
            </summary>
            <param name="guid">guid of the device</param>
            <param name="groupId">Group id to witch network is assigned</param>
        </member>
        <member name="T:OverlayManagementClient.Controllers.SwitchController">
            <summary>
            This Controller provides endpoints for admins to manage switches.
            </summary>
        </member>
        <member name="M:OverlayManagementClient.Controllers.SwitchController.Index">
            <summary>
            Endpoing to access list of Switches.
            </summary>
        </member>
        <member name="M:OverlayManagementClient.Controllers.SwitchController.Details(System.String)">
            <summary>
            Endpoint for getting the switch details window.
            </summary>
            <param name="key">Open virtual switch prefix</param>
        </member>
        <member name="M:OverlayManagementClient.Controllers.SwitchController.Create">
            <summary>
            Endpoint that for getting the form to register the switch.
            </summary>
        </member>
        <member name="M:OverlayManagementClient.Controllers.SwitchController.Create(OverlayManagementClient.Models.OvsRegistration)">
            <summary>
            Endpoint to submit form data for switch registration.
            </summary>
            <param name="ovsRegistration">OvsRegistration DTO containing all information for switch registration</param>
        </member>
        <member name="M:OverlayManagementClient.Controllers.SwitchController.Delete(System.String)">
            <summary>
            Endpoint to remove the unregister the switch.
            </summary>
            <param name="groupId">Open virtual switch prefix</param>
        </member>
        <member name="T:OverlayManagementClient.Infrastructure.GroupPolicyHandler">
            <summary>
            GroupPolicyHandler deals with custom Policy-based authorization.
            GroupPolicyHandler evaluates the GroupPolicyRequirement against AuthorizationHandlerContext 
            by calling CheckUsersGroupMembership method to determine if authorization is allowed.
            </summary>
        </member>
        <member name="M:OverlayManagementClient.Infrastructure.GroupPolicyHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,OverlayManagementClient.Infrastructure.GroupPolicyRequirement)">
            <summary>
            Makes a decision if authorization is allowed based on GroupPolicyRequirement.
            </summary>
            <param name="context"></param>
            <param name="requirement"></param>
            <returns></returns>
        </member>
        <member name="T:OverlayManagementClient.Infrastructure.GroupPolicyRequirement">
            <summary>
            GroupPolicyRequirement contains data parameter that 
            GroupPolicyHandler uses to evaluate against the current user principal or session data.
            </summary>
        </member>
        <member name="T:OverlayManagementClient.Repositories.DeviceRepository">
            <summary>
            Class encapsulates logic for target device related communication with API.
            </summary>
        </member>
        <member name="M:OverlayManagementClient.Repositories.DeviceRepository.AddDeviceAsync(OverlayManagementClient.Models.VmConnection)">
            <summary>
            Method allows to deploy a device to the network by calling OverlayManagementService API.
            </summary>
            <param name="vmConnection">VmConnection DTO containing all neceserry data from device deployment</param>
        </member>
        <member name="M:OverlayManagementClient.Repositories.DeviceRepository.RemoveDeviceAsync(System.String,System.Guid)">
            <summary>
            Method allows to remove target device from network by calling OverlayManagementService API.
            </summary>
            <param name="groupId">Id of Azure Active Derictory group for which Network was deployed</param>
            <param name="guid">guid of the device to be removed from network</param>
        </member>
        <member name="T:OverlayManagementClient.Repositories.NetworkRepository">
            <summary>
            Class encapsulates logic for overlay network related communication with API.
            </summary>
        </member>
        <member name="M:OverlayManagementClient.Repositories.NetworkRepository.AddNetworkAsync(OverlayManagementClient.Models.OVSConnection)">
            <summary>
            Method allows to deploy a network by calling OverlayManagementService API.
            </summary>
            <param name="oVSConnection">OVSConnection DTO containing all neceserry data from network deployment</param>
            <returns>OverlayNetwork as Task result</returns>
        </member>
        <member name="M:OverlayManagementClient.Repositories.NetworkRepository.DeleteNetworkAsync(System.String)">
            <summary>
            Method allows to suspend network by calling OverlayManagementService API.
            </summary>
            <param name="groupId">Id of Azure Active Derictory group for which Network was deployed</param>
        </member>
        <member name="M:OverlayManagementClient.Repositories.NetworkRepository.EditNetworkAsync(OverlayManagementClient.Models.OverlayNetwork)">
            <summary>
            Method allows to Update already deployed network by calling OverlayManagementService API.
            </summary>
            <param name="overlayNetwork">Updated OverlayNetwork object</param>
            <returns>OverlayNetwork as Task result</returns>
        </member>
        <member name="M:OverlayManagementClient.Repositories.NetworkRepository.GetNetworksAsync">
            <summary>
            Method allows to get all deployed Networks from the OverlayManagementService API.
            </summary>
            <returns>IEnumerable with OverlayNetwork DTO's</returns>
        </member>
        <member name="M:OverlayManagementClient.Repositories.NetworkRepository.GetNetworkAsync(System.String)">
            <summary>
            Method allows to get a Network with a specific vni from the OverlayManagementService API.
            </summary>
            <param name="vni">Virtual Network Identifier</param>
            <returns>OverlayNetwork as Task result</returns>
        </member>
        <member name="T:OverlayManagementClient.Repositories.SwitchRepository">
            <summary>
            Class encapsulates logic for switch related communication with API.
            </summary>
        </member>
        <member name="M:OverlayManagementClient.Repositories.SwitchRepository.GetSwitchesAsync">
            <summary>
            Method allows to get all registered switches from the OverlayManagementService API.
            </summary>
            <returns>IEnumerable with OpenVirtualSwitch DTO's</returns>
        </member>
        <member name="M:OverlayManagementClient.Repositories.SwitchRepository.GetSwitchAsync(System.String)">
            <summary>
            Method allows to get a switch with a specific prefix from the OverlayManagementService API.
            </summary>
            <param name="key">Open Virtual Switch prefix</param>
            <returns>OpenVirtualSwitch as Task result</returns>
        </member>
        <member name="M:OverlayManagementClient.Repositories.SwitchRepository.AddSwitchAsync(OverlayManagementClient.Models.OvsRegistration)">
            <summary>
            Method allows toregister a switch by calling OverlayManagementService API.
            </summary>
            <param name="ovsRegistration">OvsRegistration DTO containing all neceserry data from switch registration</param>
        </member>
        <member name="M:OverlayManagementClient.Repositories.SwitchRepository.DeleteSwitchAsync(System.String)">
            <summary>
            Method allows to clean up the switch by calling OverlayManagementService API.
            </summary>
            <param name="key">Open Virtual Switch prefix</param>
        </member>
        <member name="M:OverlayManagementClient.Services.GraphService.GetSignedInUsersGroups(Microsoft.AspNetCore.Authentication.OpenIdConnect.TokenValidatedContext)">
            <summary>
            This method inspects the claims collection created from the ID or Access token issued to a user and returns the groups that are present in the token.
            If groups claims are already present in Session then it returns the list of groups by calling GetSessionGroupList method.
            If it detects groups overage, the method then makes calls to ProcessUserGroupsForOverage method.
            </summary>
            <param name="context">TokenValidatedContext</param>
        </member>
        <member name="M:OverlayManagementClient.Services.GraphService.GetUserGroupsFromSession(Microsoft.AspNetCore.Http.ISession)">
            <summary>
            Retrieves all the groups saved in Session.
            </summary>
            <param name="_httpContextSession"></param>
            <returns></returns>
        </member>
        <member name="M:OverlayManagementClient.Services.GraphService.HasOverageOccurred(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Checks if 'Group Overage' claim exists for signed-in user.
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:OverlayManagementClient.Services.GraphService.IsAccessToken(System.Security.Claims.ClaimsIdentity)">
            <summary>
            ID Token does not contain 'scp' claim.
            This claims exist for Access Token.
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:OverlayManagementClient.Services.GraphService.ProcessUserGroupsForOverage(Microsoft.AspNetCore.Authentication.OpenIdConnect.TokenValidatedContext)">
            <summary>
            This method is called for Groups overage scenario.
            The method makes calls to Microsoft Graph to fetch the group membership of the authenticated user.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:OverlayManagementClient.Services.GraphService.ProcessIGraphServiceMemberOfCollectionPage(Microsoft.Graph.IUserMemberOfCollectionWithReferencesPage)">
            <summary>
            Returns all the groups that the user is a direct member of.
            </summary>
            <param name="membersCollectionPage">First page having collection of directory roles and groups</param>
            <returns>List of groups</returns>
        </member>
        <member name="M:OverlayManagementClient.Services.GraphService.CheckUsersGroupMembership(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.String,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Checks if user is member of the required group.
            </summary>
            <param name="context"></param>
            <param name="GroupName"></param>
            <param name="_httpContextAccessor"></param>
            <returns></returns>
        </member>
        <member name="T:OverlayManagementClient.Services.VXLANManagementService">
            <summary>
            Service class(Facade) which acts as interface for all management related operations.
            </summary>
        </member>
        <member name="M:OverlayManagementClient.Services.VXLANManagementService.AddTargetDevice(OverlayManagementClient.Models.VmConnection)">
            <summary>
            Method adds a device to the network by triggering an API call on Device Repository.
            </summary>
            <param name="vmConnection">VmConnection DTO that holds all necessary data for device deployment</param>
        </member>
        <member name="M:OverlayManagementClient.Services.VXLANManagementService.AddNetwork(OverlayManagementClient.Models.OVSConnection)">
            <summary>
            Method invokes network deployment by triggering an API call on Network Repository.
            </summary>
            <param name="oVSConnection">OVSConnection DTO that holds all necessary data for network deployment</param>
            <returns>OverlayNetwork object</returns>
        </member>
        <member name="M:OverlayManagementClient.Services.VXLANManagementService.AddSwitch(OverlayManagementClient.Models.OvsRegistration)">
            <summary>
            Method invokes switch regitration by triggering an API call on switch Repository.
            </summary>
            <param name="ovsRegistration">OvsRegistration DTO that holds all necessary data for switch registration</param>
        </member>
        <member name="M:OverlayManagementClient.Services.VXLANManagementService.DeleteNetwork(System.String)">
            <summary>
            Method invokes network clean up by triggering an API call on Network Repository.
            </summary>
            <param name="groupId">Id of a group to which the network is assigned</param>
        </member>
        <member name="M:OverlayManagementClient.Services.VXLANManagementService.DeleteSwitch(System.String)">
            <summary>
            Method invokes switch clean up by triggering an API call on Switch Repository.
            </summary>
            <param name="key">Open virtual switch prefix</param>
        </member>
        <member name="M:OverlayManagementClient.Services.VXLANManagementService.EditNetwork(OverlayManagementClient.Models.OverlayNetwork)">
            <summary>
            Method invokes network update up by triggering an API call on Network Repository.
            </summary>
            <param name="overlayNetwork">Updated OverlayNetwork object </param>
            <returns>OverlayNetwork object</returns>
        </member>
        <member name="M:OverlayManagementClient.Services.VXLANManagementService.GetNetwork(System.String)">
            <summary>
            Method queries the network by triggering an API call on Network Repository.
            </summary>
            <param name="vni">Virtual Network Identifier</param>
            <returns>OverlayNetwork object</returns>
        </member>
        <member name="M:OverlayManagementClient.Services.VXLANManagementService.GetNetworks">
            <summary>
            Method queries all networks by triggering an API call on Network Repository.
            </summary>
            <returns>IEnumerable with OverlayNetwork objects</returns>
        </member>
        <member name="M:OverlayManagementClient.Services.VXLANManagementService.GetSwitch(System.String)">
            <summary>
            Method queries switch by triggering an API call on Switch Repository.
            </summary>
            <param name="key">Open virtual switch prefix</param>
            <returns>OpenVirtualSwitch objects</returns>
        </member>
        <member name="M:OverlayManagementClient.Services.VXLANManagementService.GetSwitches">
            <summary>
            Method queries all switches by triggering an API call on Switch Repository.
            </summary>
            <returns>IEnumerable with OpenVirtualSwitch objects</returns>
        </member>
        <member name="M:OverlayManagementClient.Services.VXLANManagementService.RemoveTargetDevice(System.String,System.Guid)">
            <summary>
             Method removes a device from the network by triggering an API call on Device Repository.
            </summary>
            <param name="groupid">Id of a group to which the network is assigned</param>
            <param name="guid">Id of the target device</param>
        </member>
    </members>
</doc>
